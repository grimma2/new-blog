from django.shortcuts import render
from rest_framework import viewsets, status
from rest_framework.decorators import action, api_view, permission_classes
from rest_framework.permissions import AllowAny, IsAdminUser, IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.parsers import MultiPartParser, FormParser, JSONParser
from django.db import models
from django.db.models import Count
import json

from .models import News, Tag
from .serializers import NewsSerializer, TagSerializer
from .permissions import HasSystemToken

# Create your views here.

class TagViewSet(viewsets.ModelViewSet):
    queryset = Tag.objects.all()
    serializer_class = TagSerializer
    permission_classes = [AllowAny]

class NewsViewSet(viewsets.ModelViewSet):
    queryset = (
        News.objects.select_related()
        .prefetch_related("tags")
        .order_by("-published_at")
    )
    serializer_class = NewsSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        qs = super().get_queryset()
        tags = self.request.query_params.get("tags")
        if tags:
            qs = qs.filter(tags__id=tags)
        slug = self.request.query_params.get("slug")
        if slug:
            qs = qs.filter(slug=slug)
        search = self.request.query_params.get("search")
        if search:
            qs = qs.filter(
                models.Q(title__icontains=search) | 
                models.Q(description__icontains=search) |
                models.Q(content__icontains=search)
            )
        return qs

class NewsImportView(APIView):
    permission_classes = [HasSystemToken]  # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞, –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    parser_classes = [MultiPartParser, FormParser, JSONParser]  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ JSON

    def post(self, request, *args, **kwargs):
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            data = request.data.copy()
            
            print(f"üîç –î–∞–Ω–Ω—ã–µ: {data}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üîç Content-Type: {request.content_type}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üîç Method: {request.method}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üîç User: {request.user}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üîç Authenticated: {request.user.is_authenticated}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            
            serializer = NewsSerializer(data=data, context={'request': request})
            if serializer.is_valid():
                news = serializer.save()
                return Response(NewsSerializer(news, context={'request': request}).data, status=status.HTTP_201_CREATED)
            else:
                print(f"üö® –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {serializer.errors}")
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            print(f"üö® –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def get(self, request, *args, **kwargs):
        return Response({
            "message": "Use POST method to import news",
            "user": str(request.user),
            "authenticated": request.user.is_authenticated,
            "has_system_token": True  # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
        }, status=status.HTTP_200_OK)


class HomePageViewSet(viewsets.ViewSet):
    """ViewSet –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    permission_classes = [AllowAny]
    
    @action(detail=False, methods=['get'])
    def latest_api_news(self, request):
        """–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API"""
        news = News.objects.filter(from_api=True).order_by('-published_at')[:3]
        serializer = NewsSerializer(news, many=True, context={'request': request})
        return Response(serializer.data)
    
    @action(detail=False, methods=['get'])
    def top_categories(self, request):
        """–¢–æ–ø 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø 3 —Ç–µ–≥–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–æ–≤–æ—Å—Ç–µ–π
        top_tags = Tag.objects.annotate(
            news_count=Count('news')
        ).filter(news_count__gt=0).order_by('-news_count')[:3]
        
        result = []
        for tag in top_tags:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
            tag_news = News.objects.filter(tags=tag).order_by('-published_at')[:5]
            result.append({
                'tag': TagSerializer(tag).data,
                'news': NewsSerializer(tag_news, many=True, context={'request': request}).data
            })
        
        return Response(result)
