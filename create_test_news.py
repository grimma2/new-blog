#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import os
from datetime import datetime, timedelta

# URL API
BASE_URL = "http://localhost:8000/api"

# –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
TEST_IMAGE_PATH = "test_image.jpg"

def create_test_image():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    if not os.path.exists(TEST_IMAGE_PATH):
        print("üì∑ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 800x600
            img = Image.new('RGB', (800, 600), color='lightblue')
            draw = ImageDraw.Draw(img)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            try:
                font = ImageFont.truetype("arial.ttf", 40)
            except:
                font = ImageFont.load_default()
            
            text = "TEST NEWS IMAGE"
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            position = ((800 - text_width) // 2, (600 - text_height) // 2)
            draw.text(position, text, fill='darkblue', font=font)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É
            draw.rectangle([10, 10, 790, 590], outline='navy', width=5)
            
            img.save(TEST_IMAGE_PATH, 'JPEG')
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {TEST_IMAGE_PATH}")
            
        except ImportError:
            print("‚ö†Ô∏è Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª...")
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫—É
            with open(TEST_IMAGE_PATH, 'wb') as f:
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π JPEG header –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                f.write(b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xff\xdb\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0c\x14\r\x0c\x0b\x0b\x0c\x19\x12\x13\x0f\x14\x1d\x1a\x1f\x1e\x1d\x1a\x1c\x1c $.\' ",#\x1c\x1c(7),01444\x1f\'9=82<.342\xff\xc0\x00\x11\x08\x00\x01\x00\x01\x01\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00\x3f\x00\xaa\xff\xd9')
            print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {TEST_IMAGE_PATH}")

def create_test_news():
    """–°–æ–∑–¥–∞–µ—Ç 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    create_test_image()
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    test_news = [
        {
            "title": "–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ",
            "description": "–û–±–∑–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
            "content": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä—ã–º–∏ —Ç–µ–º–ø–∞–º–∏. –í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö.",
            "tag_slugs": ["—Ä—É–±—Ä–∏–∫–∞1"]
        },
        {
            "title": "Breakthrough in Quantum Computing Research",
            "description": "Scientists achieve new milestone in quantum computing development",
            "content": "Researchers at leading universities have made significant progress in quantum computing technology. This breakthrough could revolutionize computing power and solve complex problems that are currently impossible for classical computers.",
            "tag_slugs": ["—Ä—É–±—Ä–∏–∫–∞2"]
        },
        {
            "title": "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ",
            "description": "–ö–∞–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –±–æ—Ä—é—Ç—Å—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∫–ª–∏–º–∞—Ç–∞",
            "content": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–º–∞—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏. –í —Å—Ç–∞—Ç—å–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –Ω–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —É—Ä–æ–≤–Ω–µ –¥–ª—è –±–æ—Ä—å–±—ã —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ–º.",
            "tag_slugs": ["—Ä—É–±—Ä–∏–∫–∞2"]
        },
        {
            "title": "The Future of Space Exploration",
            "description": "Mars missions and beyond: what's next for humanity in space",
            "content": "Space exploration is entering a new era with private companies joining government agencies in the race to explore Mars and beyond. This article examines upcoming missions and the technology that will make them possible.",
            "tag_slugs": ["—Ä—É–±—Ä–∏–∫–∞2"]
        },
        {
            "title": "–†–µ–≤–æ–ª—é—Ü–∏—è –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
            "description": "–ö–∞–∫ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–µ–Ω—è—é—Ç –ø–æ–¥—Ö–æ–¥ –∫ –ª–µ—á–µ–Ω–∏—é –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ",
            "content": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é. –û—Ç —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω—ã –¥–æ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ö–∏—Ä—É—Ä–≥–∏–∏ - –Ω–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è—é—Ç –ø–æ–¥—Ö–æ–¥ –∫ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∏ –¥–µ–ª–∞—é—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π.",
            "tag_slugs": ["—Ä—É–±—Ä–∏–∫–∞2"]
        }
    ]
    
    print("üöÄ –°–æ–∑–¥–∞–µ–º 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    for i, news_data in enumerate(test_news, 1):
        print(f"\nüìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å {i}/5: {news_data['title'][:50]}...")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è multipart/form-data
            files = {
                'cover_image': ('test_image.jpg', open(TEST_IMAGE_PATH, 'rb'), 'image/jpeg')
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
            published_date = datetime.now() - timedelta(days=i*5)  # –†–∞–∑–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            
            data = {
                'title': news_data['title'],
                'description': news_data['description'],
                'content': news_data['content'],
                'published_at': published_date.isoformat(),
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            for j, tag in enumerate(news_data['tag_slugs']):
                data[f'tag_slugs[{j}]'] = tag
            
            response = requests.post(
                f"{BASE_URL}/news/import/",
                files=files,
                data=data
            )
            
            files['cover_image'][1].close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
            
            if response.status_code == 201:
                result = response.json()
                print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞! ID: {result['id']}")
                print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}")
                print(f"   Slug: {result['slug']}")
                print(f"   –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {result['published_at']}")
                print(f"   –¢–µ–≥–∏: {', '.join([tag['name'] for tag in result['tags']])}")
                if result.get('cover_image'):
                    print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚úÖ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_created_news():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    try:
        response = requests.get(f"{BASE_URL}/news/")
        
        if response.status_code == 200:
            result = response.json()
            news_list = result.get('results', [])
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π:")
            for news in news_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚Ä¢ {news['title']} (ID: {news['id']}, –î–∞—Ç–∞: {news['published_at'][:10]})")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π ===")
    create_test_news()
    check_created_news()
    print("\n=== –ì–æ—Ç–æ–≤–æ! ===")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if os.path.exists(TEST_IMAGE_PATH):
        os.remove(TEST_IMAGE_PATH)
        print(f"üóëÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {TEST_IMAGE_PATH}") 